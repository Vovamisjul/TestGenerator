using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using TestGenerator.ClassMembers;

namespace TestGenerator
{
    class TestClassesGenerator
    {
        public static string Generate(List<ClassInfo> classInfo, List<UsingDirectiveSyntax> usings)
        {
            var result = string.Empty;
            foreach (ClassInfo Class in classInfo)
            {
                NamespaceDeclarationSyntax namespaceDeclaration = SyntaxFactory.NamespaceDeclaration(
                    SyntaxFactory.QualifiedName(SyntaxFactory.IdentifierName(Class.NameSpace), SyntaxFactory.IdentifierName("NUnitTests")));

                CompilationUnitSyntax testClass = SyntaxFactory.CompilationUnit()
                    .WithUsings(GetDefaultUsings(Class, usings))
                    .WithMembers(SyntaxFactory.SingletonList<MemberDeclarationSyntax>(
                        namespaceDeclaration
                        .WithMembers(SyntaxFactory.SingletonList<MemberDeclarationSyntax>(

                           SyntaxFactory.ClassDeclaration(Class.Name + "Test")

                            .WithModifiers(SyntaxFactory.TokenList(SyntaxFactory.Token(SyntaxKind.PublicKeyword)))

                            .WithAttributeLists(
                                SyntaxFactory.SingletonList(
                                    SyntaxFactory.AttributeList(
                                        SyntaxFactory.SingletonSeparatedList(
                                            SyntaxFactory.Attribute(
                                                SyntaxFactory.IdentifierName("TestFixture"))))))
                            .WithMembers(GetMethodsAndProperties(Class))))));

                result += testClass.NormalizeWhitespace().ToFullString();
            }

            return result;
        }

        private static SyntaxList<MemberDeclarationSyntax> GetTestClassDependencies(ClassInfo Class)
        {
            var result = new List<MemberDeclarationSyntax>();

            result.Add(SyntaxFactory.PropertyDeclaration(
                SyntaxFactory.ParseTypeName(Class.Name), GetTestClassName(Class.Name))
                 .AddModifiers(SyntaxFactory.Token(SyntaxKind.PrivateKeyword))
                .AddAccessorListAccessors(
                    SyntaxFactory.AccessorDeclaration(SyntaxKind.GetAccessorDeclaration)
                    .WithSemicolonToken(SyntaxFactory.Token(SyntaxKind.SemicolonToken)),
                    SyntaxFactory.AccessorDeclaration(SyntaxKind.SetAccessorDeclaration)
                    .WithSemicolonToken(SyntaxFactory.Token(SyntaxKind.SemicolonToken))
                ));

            return new SyntaxList<MemberDeclarationSyntax>().AddRange(result);
        }
        private static SyntaxList<UsingDirectiveSyntax> GetDefaultUsings(ClassInfo Class, List<UsingDirectiveSyntax> classUsings)
        {
            classUsings.Add(SyntaxFactory.UsingDirective
                 (
                    SyntaxFactory.QualifiedName
                    (
                        SyntaxFactory.IdentifierName("NUnit"),
                        SyntaxFactory.IdentifierName("Framework")
                    )
                 ));
            classUsings.Add(SyntaxFactory.UsingDirective
                 (
                    SyntaxFactory.IdentifierName(Class.NameSpace)
                 ));

            return new SyntaxList<UsingDirectiveSyntax>().AddRange(classUsings);

        }

        private static SyntaxList<MemberDeclarationSyntax> GetMethodsAndProperties(ClassInfo Class)
        {
            var methodsAndProperties = new List<MemberDeclarationSyntax>(GetTestClassDependencies(Class));

            foreach (var method in Class.Methods)
            {
                methodsAndProperties.Add(SyntaxFactory.MethodDeclaration(
                SyntaxFactory.PredefinedType(
                    SyntaxFactory.Token(SyntaxKind.VoidKeyword)),
                SyntaxFactory.Identifier(method.Name + "Test"))
                .WithAttributeLists(
                    SyntaxFactory.SingletonList(
                        SyntaxFactory.AttributeList(
                            SyntaxFactory.SingletonSeparatedList(
                                SyntaxFactory.Attribute(
                                    SyntaxFactory.IdentifierName("Test"))))))
                .WithModifiers(SyntaxFactory.TokenList(SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
                .WithBody(SyntaxFactory.Block(SyntaxFactory.ParseStatement(
              "Assert.Fail(\"autogenerated\");"))));
            }

            return new SyntaxList<MemberDeclarationSyntax>().AddRange(methodsAndProperties);
        }

        private static string GetTestClassName(string className)
        {
            return "_" + className.ToLower()[0] + className.Substring(1);
        }
    }
}
