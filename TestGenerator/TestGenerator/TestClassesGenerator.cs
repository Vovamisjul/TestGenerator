using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using TestGenerator.ClassMembers;

namespace TestGenerator
{
    class TestClassesGenerator
    {
        public static string Generate(List<NamespaceInfo> namespacesInfo, List<UsingDirectiveSyntax> usings)
        {
            string result = "";
            CompilationUnitSyntax testUsings = SyntaxFactory.CompilationUnit()
                .WithUsings(GetDefaultUsings(namespacesInfo, usings));
            result += testUsings.NormalizeWhitespace().ToFullString();
            foreach (var namespaceInfo in namespacesInfo)
            {
                NamespaceDeclarationSyntax namespaceDeclaration = SyntaxFactory.NamespaceDeclaration(
                SyntaxFactory.QualifiedName(SyntaxFactory.IdentifierName(namespaceInfo.Name), SyntaxFactory.IdentifierName("Tests")));
                SyntaxList<MemberDeclarationSyntax> testClasses = new SyntaxList<MemberDeclarationSyntax>();
                foreach (var Class in namespaceInfo.Classes)
                {
                    testClasses = testClasses.Add(SyntaxFactory.ClassDeclaration(Class.Name + "Tests")
                                .WithModifiers(SyntaxFactory.TokenList(SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
                                .WithAttributeLists(
                                    SyntaxFactory.SingletonList(
                                        SyntaxFactory.AttributeList(
                                            SyntaxFactory.SingletonSeparatedList(
                                                SyntaxFactory.Attribute(
                                                    SyntaxFactory.IdentifierName("TestFixture"))))))
                                .WithMembers(GetMethodsAndProperties(Class)));
                }
                result += "\r\n" + namespaceDeclaration.WithMembers(testClasses).NormalizeWhitespace().ToFullString();
            }

            return result;
        }
        private static SyntaxList<UsingDirectiveSyntax> GetDefaultUsings(List<NamespaceInfo> namespaces, List<UsingDirectiveSyntax> classUsings)
        {
            classUsings.Add(SyntaxFactory.UsingDirective
                 (
                    SyntaxFactory.QualifiedName
                    (
                        SyntaxFactory.IdentifierName("NUnit"),
                        SyntaxFactory.IdentifierName("Framework")
                    )
                 ));
            foreach (var namespaceInfo in namespaces)
                classUsings.Add(SyntaxFactory.UsingDirective
                     (
                        SyntaxFactory.IdentifierName(namespaceInfo.Name)
                     ));

            return new SyntaxList<UsingDirectiveSyntax>().AddRange(classUsings);

        }

        private static SyntaxList<MemberDeclarationSyntax> GetMethodsAndProperties(ClassInfo Class)
        {
            var methodsAndProperties = new List<MemberDeclarationSyntax>();

            foreach (var method in Class.Methods)
            {
                methodsAndProperties.Add(SyntaxFactory.MethodDeclaration(
                SyntaxFactory.PredefinedType(
                    SyntaxFactory.Token(SyntaxKind.VoidKeyword)),
                SyntaxFactory.Identifier(method.Name + "Test"))
                .WithAttributeLists(
                    SyntaxFactory.SingletonList(
                        SyntaxFactory.AttributeList(
                            SyntaxFactory.SingletonSeparatedList(
                                SyntaxFactory.Attribute(
                                    SyntaxFactory.IdentifierName("Test"))))))
                .WithModifiers(SyntaxFactory.TokenList(SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
                .WithBody(SyntaxFactory.Block(SyntaxFactory.ParseStatement(
              "Assert.Fail(\"autogenerated\");"))));
            }

            return new SyntaxList<MemberDeclarationSyntax>().AddRange(methodsAndProperties);
        }

        private static string GetTestClassName(string className)
        {
            return "_" + className.ToLower()[0] + className.Substring(1);
        }
    }
}
